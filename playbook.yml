# -*- mode: yaml-*-
# vi: set ft=yaml sw=2 ts=2 :

- name: Configure development machine
  hosts: all
  sudo: True
  vars:
    update_apt_cache: yes
    app_name: "reactorfilm"
    app_user: "{{ app_name }}"
    app_group: "webapps"
    app_dir: "/usr/local/{{ app_name }}/"
    nginx_server_name: "{{ app_name }}"
    # Nginx settings
    nginx_http_port: 80
    nginx_https_port: 443
    app_log_dir: "{{ app_dir }}log/"
    nginx_access_log_file: "{{ app_log_dir }}nginx_access.log"
    nginx_error_log_file: "{{ app_log_dir }}nginx_error.log"
    nginx_static_dir: "{{ app_dir }}/build/"
    nginx_media_dir: "{{ app_dir }}/media/"


    git_repo: "https://github.com/kharandziuk/project1"
    git_branch: "master"

  tasks:
    - name: set locale
      lineinfile: dest=/etc/default/locale line="LC_ALL=C"

    - name: install dependencies
      apt: name={{ item }} update_cache={{ update_apt_cache }}
      with_items:
        - git
        - curl

    - name: Create the application user
      user: name={{ app_user }} state=present

    - name: Create the application group
      group: name={{ app_group }} system=yes state=present

    - name: Add the application user to the application group
      user: name={{ app_user }} group={{ app_group }} state=present

    - name: Ensure that the application file permissions are set properly
      file: 
        path: "{{ app_dir }}"
        recurse: yes
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        state: directory
      #notify: restart application

    - name: setup the git repo
      git:
        repo: "{{ git_repo }}"
        version: "{{ git_branch }}"
        dest: "{{ app_dir }}"
        accept_hostkey: yes
      #when: setup_git_repo is defined and setup_git_repo
      tags: git

    - name: ensure log directory is created
      file:
        path: "{{ app_log_dir }}"
        state: directory

    - name: install nginx
      apt: name=nginx update_cache={{ update_apt_cache }} state=installed
      tags:
        - packages
        - nginx


    - name: Create the Nginx configuration file
      template:
        src: nginx_site_config.j2
        dest: "/etc/nginx/sites-available/{{ app_name }}"
        backup: yes
      notify: reload nginx
      tags:
        - nginx

    - name: ensure that the default site is disabled
      file: 
        path: "/etc/nginx/sites-enabled/default"
        state: absent
      notify: reload nginx
      tags:
        - nginx

    - name: ensure that the application site is enabled
      file:
        src:  "/etc/nginx/sites-available/{{ app_name }}"
        path: "/etc/nginx/sites-enabled/{{ app_name}}"
        state: link
      notify: reload nginx
      tags:
        - nginx

    - name: Ensure Nginx service is started
      service: name=nginx state=started enabled=yes
      tags:
        - nginx


  handlers:
    - name: restart nginx
      service: name=nginx state=restarted enabled=yes

    - name: reload nginx
      service: name=nginx state=reloaded enabled=yes
